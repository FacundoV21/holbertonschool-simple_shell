.TH _PRINTF
.SH "NAME"
_printf \- prints content depending on the format
.SH LIBRARY
main.h
.SH SYNOPSIS
int _printf(char *format, …);
.SH DESCRIPTION:
_printf aims to be able to print “format” which is a string received, as
.PP
well as some other arguments depending on directives given in format.
.SH RETURN VALUE:
If format is not NULL returns the amount of characters printed, otherwise
.PP
returns -1.
.SH FORMAT SPECIFIERS:
%s: prints a string.
.PP
%c: prints a single char.
.PP
%d: prints a decimal value.
.PP
%i: prints an integer value.
.PP
%b: prints an unsigned int on binary base.
.PP
%u: prints an unsigned int.
.PP
%o: prints an unsigned int on octal base
.PP
%x: prints an unsigned int in hexadecimal base lowercase
.PP
%X: prints an unsigned int in hexadecimal base uppercase
.PP
%S: Prints a string with the non printable characters represented with \x and the ascii value of the char.
.PP
%r: Prints a reversed string.
.PP
%R: Prints a Rot13'ed string.
.PP
%%: Prints the % sign
.PP
The format might include certain characters that could interfere with the
.PP
printing of the string, so there is a specific way to print them.
.SH SPECIAL CHARACTERS:
\\\\: prints the '\\' character.
.PP
\\”: prints the '“' character.
.PP
\\': prints the ''' character.
.PP
\\%:  prints the '%' character.
.PP
\\a: reproduces a sound alert
.PP
\\b: prints a backspace.
.PP
\\f: form feed
.PP
\\n: prints a new line
.PP
\\r: prints a carriage return
.PP
\\t: prints a tab
.PP
\\v: prints a vertical tab
.SH EXAMPLES: